#lang racket/base

(provide (all-defined-out))

;;; parsed syntax
(struct Pbool (bool)                            #:transparent)
(struct Pcall (p)                               #:transparent)
(struct Pcond (test yes no)                     #:transparent)
(struct Pdefine (id expr)                       #:transparent)
(struct Pfor (id first_val second_val expr)     #:transparent)
(struct Pfun (id param)                         #:transparent)
(struct Pfunction (id param expr)               #:transparent)
(struct Pid (i)                                 #:transparent)
(struct Ploop (cond instr)                      #:transparent)
(struct Pmax (x y)                              #:transparent)  
(struct Pmin (x y)                              #:transparent)
(struct Pnot (oprtr val)                        #:transparent)
(struct Poperator (oprtr first_val second_val)  #:transparent)
(struct Pparam (p)	                      	    #:transparent)
(struct Pprint (expr)                           #:transparent)
(struct Pprint_ (expr)                          #:transparent)
(struct Pprint_nb (expr)                        #:transparent)
(struct Preturn (expr)                          #:transparent)
(struct Pval (val)                              #:transparent)

; instructions
(struct B (lbl))
(struct Beq (reg1 reg2 lbl))
(struct Bge (reg1 reg2 lbl))
(struct Bgt (reg1 reg2 lbl))
(struct Ble (reg1 reg2 lbl))
(struct Blt (reg1 reg2 lbl))
(struct Label (lbl))
(struct La (dst loc))
(struct Li (dst imm))
(struct Lw (reg loc))
(struct Add (dst rg1 rg2))
(struct Addi (dst reg imm))
(struct And(rd reg1 reg2))
(struct Sub (dst rg1 rg2))
(struct Mul (rg1 rg2))
(struct Div (rg1 rg2))
(struct J (reg))
(struct Jal (reg))
(struct Jr (reg))
(struct Mfhi (reg))
(struct Mflo (reg))
(struct Move (dst reg))
(struct Or(rd reg1 reg2))
(struct Sll (dest src i))
(struct Srl (dest src i))
(struct Sw (reg loc))
(struct Syscall ())
(struct Xor(rd reg1 reg2))

; locations
(struct Lbl (name))
(struct Mem (reg offset))

