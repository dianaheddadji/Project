#lang racket


(define (mode)
  (newline)
  (newline)
  (newline)
  (newline)
  (newline)
  (begin
    (display "                                                                           Morpion")
    (newline)
    (newline)
    (newline)
    (newline)
    (display "                  Pour lancer une partie multijoueur entrer [1].")
    (newline)
    (display "                  Pour lancer une partie joueur X VS bot O entrer [2].")
    (newline)
    (display "                  Pour lancer une partie bot VS bot entrer [3].")
    (newline)
    (display "                  Pour quitter entrer [0].")
    (newline)
    (newline)
    (display "                  Votre Choix : ")
    (depart (read))
  )
)

(define (depart choix)
  (if (number? choix)
    (if (= choix 0)
      (display "                                        Vous avez quitté !")
      (if (and (> choix 0) (<= choix 3))
        (begin
          (newline)
          (display "                  Joueur [1] = X")
          (newline)
          (display "                  Joueur [2] = O")
          (newline)
          (display "                  Case [1-9]")
          (newline)
          (newline)
          (display "                                   Joueur [1] qui commence !")
          (newline)
          (newline)
          (saisie choix 0)
          (newline)
          (newline)
          (newline)
          (display "                  Rejouer ? [1/0]")
          (newline)
          (newline)
          (rejouer? (read))
        )
        (begin
          (newline)
          (display "                  ERREUR, Resaisissez une nouvelle valeur : ")
          (depart (read))
        )
      )
    )
    (begin
      (newline)
      (display "                  ERREUR, Resaisissez une nouvelle valeur : ")
      (depart (read))
    )
  )
)


;JEU


(define (saisie choix compt)
  (if (or (= choix 1) (and (= choix 2) (= (remainder compt 2) 0)))
    (begin
      (newline)
      (display "                  Case : ")
      (placer? (read) choix compt)
    )
    (placer? (random 10) choix compt)
  )
)

(define (placer? c choix compt)
  (if (and (or (= choix 1) (and (= choix 2) (= (remainder compt 2) 0))) (or (not(number? c)) (<= c 0) (> c 9)))
    (begin
      (display "                  Saisissez une case valable")
      (saisie choix compt)
    )
    (if (and (or (= choix 3) (and (= choix 2) (= (remainder compt 2) 1))) (or (not(number? c)) (<= c 0) (> c 9)))
      (saisie choix compt)
      (if (and (or (= choix 1) (= choix 2))  (= (remainder compt 2) 0))
        (begin 
          (display "                  Symbole [X] : ") 
          (affiche (verifier '(1 2 3 4 5 6 7 8 9) c '(X) (read) choix compt) choix compt)
        )
        (if (and (= choix 3) (= (remainder compt 2) 0))
            (affiche (verifier '(1 2 3 4 5 6 7 8 9) c '(X) 'X choix compt) choix compt)
            (if (and (= choix 1) (= (remainder compt 2) 1))
              (begin 
                (display "                  Symbole [O] : ") 
                (affiche (verifier '(1 2 3 4 5 6 7 8 9) c '(O) (read) choix compt) choix compt)
              )
              (affiche (verifier '(1 2 3 4 5 6 7 8 9) c '(O) 'O choix compt) choix compt)
            )
        )
      )
    )
  )
)

(define (verifier l c d s choix compt)
  (if (and (or (= choix 1) (and (= choix 2) (= (remainder compt 2) 0))) (not(appartient_symbole d s)))
    (begin
      (newline)
      (display "                  Saisissez un symbole valable !")
      (newline)
      (newline)
      (display "                             Symbole : ")
      (verifier l c d (read) choix compt)
    )
    (if (equal? (first l) c)
      (begin
        (display "                                             Morpion         ")
        (newline)
        (display "                                   _________________________")
        (cons s (rest l))
      )
      (cons (first l) (verifier (rest l) c d s choix compt))
    )
  )
)

(define (appartient_symbole l s)
  (if (empty? l)
    #f
    (if (equal? (first l) s)
      #t
      (appartient_symbole (rest l) s)
    )
  )
)

(define (affiche l choix compt)
  (affiche_bis l 0)
  (boucle l choix (+ compt 1))
)

(define (affiche_bis l acc)
  (if (empty? l)
    (newline)
    (if (or (= acc 0) (= acc 3) (= acc 6))
      (begin
        (newline)
        (display "                                   |       |       |       |")
        (newline)
        (display "                                   |   ") (display (first l)) (display "   |")
        (affiche_bis (rest l) (+ acc 1))
      )
      (begin  
        (display "   ") (display (first l)) (display "   |")
        (if (or (= acc 2) (= acc 5) (= acc 8))
           (begin
              (newline)
              (display "                                   |_______|_______|_______|")
           )
           (void)
        )
        (affiche_bis (rest l) (+ acc 1))
      )
    )
  )
)

(define (saisiebis l choix compt)
  (if (or (= choix 1) (and (= choix 2) (= (remainder compt 2) 0)))
    (begin
      (newline)
      (newline)
      (display "                  Case : ")
      (placer?bis l (read) choix compt)
    )
    (placer?bis l (random 10) choix compt)
  )
)

(define (Qui_joue? l c choix compt)
  (if (or (and (= choix 1) (= (remainder compt 2) 0)) (and (= choix 2) (= (remainder compt 2) 0)))
    (begin
      (newline)
      (newline)
      (display "                                   C'est au tour du joueur [1] !")
      (newline)
      (newline)
      (display "                  Symbole [X] : ")
      (affiche (verifier l c '(X) (read) choix compt) choix compt)
    )
    (if (and (= choix 3) (= (remainder compt 2) 0))
      (begin
        (newline)
        (newline)
        (display "                                   C'est au tour du joueur [1] !")
        (newline)
        (newline)
        (affiche (verifier l c '(X) 'X choix compt) choix compt)
      )
      (if (and (= choix 1) (= (remainder compt 2) 1))
        (begin
          (newline)
          (newline)
          (display "                                   C'est au tour du joueur [2] !")
          (newline)
          (newline)
          (display "                  Symbole [O] : ")
          (affiche (verifier l c '(O) (read) choix compt) choix compt)
        )
        (begin
          (newline)
          (newline)
          (display "                                   C'est au tour du joueur [2] !")
          (newline)
          (newline)
          (affiche (verifier l c '(X) 'O choix compt) choix compt)
        )
      )
    )
  )
)

(define (case_occupee l c)
  (if (or (empty? l))
    #t
    (if (equal? (first l) c)
      #f
      (case_occupee (rest l) c)
    )
  )
)          

(define (placer?bis l c choix compt)
  (if (and (or (= choix 1) (and (= choix 2) (= (remainder compt 2) 0))) (or (not(number? c)) (<= c 0) (> c 9) (case_occupee l c)))
    (begin
      (display "                  Saisissez une case valable !")
      (saisiebis l choix compt)
    )
    (if (and (or (= choix 3) (and (= choix 2) (= (remainder compt 2) 1))) (or (not(number? c)) (<= c 0) (> c 9) (case_occupee l c)))
      (saisiebis l choix compt)
      (Qui_joue? l c choix compt)
    )
  )
)

(define (chercher l a b c)
  (alignement l a b c 1)
)

(define (alignement l p1 p2 p3 acc)
  (if (empty? l)
    empty
    (if (or (= acc p1) (= acc p2) (= acc p3))
      (cons (first l) (alignement (rest l) p1 p2 p3 (+ acc 1)))
      (alignement (rest l) p1 p2 p3 (+ acc 1))
    )
  )
)

(define (match_nul l)
  (if (empty? l)
    #t
    (if (number? (first l))
      #f
      (match_nul (rest l))
    )
  )
)

(define (g l choix compt)
  (if (gagner l '(X X X))
    (begin
      (newline)
      (display "                                        Bravo joueur [1] !")
    )
    (if (gagner l '(O O O))
      (begin
        (newline)
        (display "                                        Bravo joueur [2] !")
      )
      (if (match_nul l)
        (begin
          (newline)
          (display "                                           Match Nul !")
        )
        (saisiebis l choix compt)
      )
    )
  )
)

(define (gagner l d)
  (if (equal? (chercher l 1 2 3) d)
    1
    (if (equal? (chercher l 4 5 6) d)
      2
      (if (equal? (chercher l 7 8 9) d)
        3
        (if (equal? (chercher l 1 4 7) d)
          4
          (if (equal? (chercher l 2 5 8) d)
            5
            (if (equal? (chercher l 3 6 9) d)
              6
              (if (equal? (chercher l 3 5 7) d)
                7
                (if (equal? (chercher l 1 5 9) d)
                  8
                  #f
                )
              )
            )
          )
        )
      )
    )
  )
)

(define (boucle l choix compt)
  (if (< compt 5)
    (saisiebis l choix compt)
    (g l choix compt)
  )
)

(define (rejouer? entree)
  (if (= entree 1)
    (mode)
    (begin
      (newline)
      (newline)
      (display "                  Vous avez quitté !")
    )
  )
)

(mode)